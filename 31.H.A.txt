# 1. Напишите декоратор validate_args, который будет проверять типы аргументов функции и выводить 
# сообщение об ошибке, если переданы аргументы неправильного типа. Декоратор должен принимать ожидаемые 
# типы аргументов в качестве параметров.


def validate_args(*expected_types):
    def decorator(func):
        def wrapper(*args, **kwargs):
            for i, (arg, expected_type) in enumerate(zip(args, expected_types)):
                if not isinstance(arg, expected_type):
                    raise TypeError(f"Аргумент {i + 1} имеет неправильный тип {type(arg)}. Предпологаемый {expected_type}.")
            return func(*args, **kwargs)
        return wrapper
    return decorator

@validate_args(int, str)
def greet(age, name):
    print(f"Привет, {name}! Тебе {age} лет.")

greet(25, "Анна")

try:
    greet("25", "Анна")
except TypeError as e:
    print(e)

===============================================================

# 2. Напишите декоратор log_args, который будет записывать аргументы и результаты вызовов функции в лог-файл
# . Каждый вызов функции должен быть записан на новой строке в формате
# "Аргументы: <аргументы>, Результат: <результат>". Используйте модуль logging для записи в лог-файл.


import logging


logging.basicConfig(filename='log.txt', level=logging.INFO, format='%(message)s')

def log_args(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        logging.info(f"Аргументы: {args}, Результат: {result}")
        return result
    return wrapper

@log_args
def add(a, b):
    return a + b

add(2, 3)
add(5, 7)
